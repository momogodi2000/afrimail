# Generated by Django 4.2.7 on 2025-06-30 15:48

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('company', models.CharField(max_length=200)),
                ('company_website', models.URLField(blank=True, null=True)),
                ('industry', models.CharField(choices=[('TECHNOLOGY', 'Technology'), ('HEALTHCARE', 'Healthcare'), ('EDUCATION', 'Education'), ('FINANCE', 'Finance'), ('RETAIL', 'Retail'), ('MANUFACTURING', 'Manufacturing'), ('CONSULTING', 'Consulting'), ('MARKETING', 'Marketing & Advertising'), ('REAL_ESTATE', 'Real Estate'), ('HOSPITALITY', 'Hospitality'), ('OTHER', 'Other')], default='OTHER', max_length=20)),
                ('company_size', models.CharField(choices=[('1-5', '1-5 employees'), ('6-25', '6-25 employees'), ('26-100', '26-100 employees'), ('101-500', '101-500 employees'), ('500+', '500+ employees')], default='1-5', max_length=10)),
                ('country', models.CharField(choices=[('CM', 'Cameroon'), ('NG', 'Nigeria'), ('KE', 'Kenya'), ('GH', 'Ghana'), ('ZA', 'South Africa'), ('EG', 'Egypt'), ('MA', 'Morocco'), ('TN', 'Tunisia'), ('CI', "CÃ´te d'Ivoire"), ('SN', 'Senegal'), ('OTHER', 'Other')], default='CM', max_length=10)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('role', models.CharField(choices=[('SUPER_ADMIN', 'Super Administrator'), ('CLIENT', 'Client User')], default='CLIENT', max_length=20)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('email_verification_token', models.CharField(blank=True, max_length=100, null=True)),
                ('email_verification_sent_at', models.DateTimeField(blank=True, null=True)),
                ('password_reset_token', models.CharField(blank=True, max_length=100, null=True)),
                ('password_reset_sent_at', models.DateTimeField(blank=True, null=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('login_count', models.IntegerField(default=0)),
                ('preferred_language', models.CharField(default='en', max_length=10)),
                ('timezone', models.CharField(default='Africa/Douala', max_length=50)),
                ('receive_notifications', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator()])),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('', 'Not Specified')], max_length=1)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('company', models.CharField(blank=True, max_length=200, null=True)),
                ('job_title', models.CharField(blank=True, max_length=100, null=True)),
                ('industry', models.CharField(blank=True, max_length=100, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('UNSUBSCRIBED', 'Unsubscribed'), ('BOUNCED', 'Bounced'), ('COMPLAINED', 'Complained'), ('BLOCKED', 'Blocked')], default='ACTIVE', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('subscribed_at', models.DateTimeField(auto_now_add=True)),
                ('unsubscribed_at', models.DateTimeField(blank=True, null=True)),
                ('unsubscribe_reason', models.TextField(blank=True, null=True)),
                ('total_emails_received', models.IntegerField(default=0)),
                ('total_emails_opened', models.IntegerField(default=0)),
                ('total_emails_clicked', models.IntegerField(default=0)),
                ('last_email_opened_at', models.DateTimeField(blank=True, null=True)),
                ('last_email_clicked_at', models.DateTimeField(blank=True, null=True)),
                ('engagement_score', models.FloatField(default=0.0)),
                ('source', models.CharField(blank=True, max_length=100, null=True)),
                ('referrer', models.CharField(blank=True, max_length=200, null=True)),
                ('utm_source', models.CharField(blank=True, max_length=100, null=True)),
                ('utm_medium', models.CharField(blank=True, max_length=100, null=True)),
                ('utm_campaign', models.CharField(blank=True, max_length=100, null=True)),
                ('custom_fields', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
                'db_table': 'contacts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContactList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('list_type', models.CharField(choices=[('MANUAL', 'Manual List'), ('DYNAMIC', 'Dynamic Segment'), ('IMPORTED', 'Imported List')], default='MANUAL', max_length=20)),
                ('conditions', models.JSONField(blank=True, default=dict)),
                ('contact_count', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_favorite', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_lists', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Contact List',
                'verbose_name_plural': 'Contact Lists',
                'db_table': 'contact_lists',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='DomainReputation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(max_length=100, unique=True)),
                ('reputation_score', models.FloatField(default=100.0)),
                ('total_emails_sent', models.IntegerField(default=0)),
                ('total_bounces', models.IntegerField(default=0)),
                ('total_complaints', models.IntegerField(default=0)),
                ('bounce_rate', models.FloatField(default=0.0)),
                ('complaint_rate', models.FloatField(default=0.0)),
                ('is_blacklisted', models.BooleanField(default=False)),
                ('blacklist_sources', models.JSONField(blank=True, default=list)),
                ('last_checked_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'domain_reputation',
                'ordering': ['-reputation_score'],
            },
        ),
        migrations.CreateModel(
            name='EmailCampaign',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('campaign_type', models.CharField(choices=[('REGULAR', 'Regular Campaign'), ('A_B_TEST', 'A/B Test Campaign'), ('AUTORESPONDER', 'Autoresponder'), ('RSS', 'RSS Campaign')], default='REGULAR', max_length=20)),
                ('subject', models.CharField(max_length=255)),
                ('from_name', models.CharField(max_length=100)),
                ('from_email', models.EmailField(max_length=254)),
                ('reply_to_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('html_content', models.TextField()),
                ('text_content', models.TextField(blank=True, null=True)),
                ('recipient_count', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SCHEDULED', 'Scheduled'), ('SENDING', 'Sending'), ('SENT', 'Sent'), ('PAUSED', 'Paused'), ('CANCELLED', 'Cancelled'), ('FAILED', 'Failed')], default='DRAFT', max_length=20)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('NORMAL', 'Normal'), ('HIGH', 'High')], default='NORMAL', max_length=10)),
                ('scheduled_at', models.DateTimeField(blank=True, null=True)),
                ('send_immediately', models.BooleanField(default=False)),
                ('track_opens', models.BooleanField(default=True)),
                ('track_clicks', models.BooleanField(default=True)),
                ('track_unsubscribes', models.BooleanField(default=True)),
                ('emails_sent', models.IntegerField(default=0)),
                ('emails_delivered', models.IntegerField(default=0)),
                ('emails_bounced', models.IntegerField(default=0)),
                ('emails_failed', models.IntegerField(default=0)),
                ('unique_opens', models.IntegerField(default=0)),
                ('total_opens', models.IntegerField(default=0)),
                ('unique_clicks', models.IntegerField(default=0)),
                ('total_clicks', models.IntegerField(default=0)),
                ('unsubscribes', models.IntegerField(default=0)),
                ('complaints', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('contact_lists', models.ManyToManyField(blank=True, related_name='campaigns', to='backend.contactlist')),
            ],
            options={
                'verbose_name': 'Email Campaign',
                'verbose_name_plural': 'Email Campaigns',
                'db_table': 'email_campaigns',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('bio', models.TextField(blank=True, max_length=500, null=True)),
                ('email_marketing_consent', models.BooleanField(default=True)),
                ('newsletter_subscription', models.BooleanField(default=True)),
                ('dashboard_layout', models.CharField(default='default', max_length=20)),
                ('items_per_page', models.IntegerField(default=20)),
                ('email_signature', models.TextField(blank=True, null=True)),
                ('total_contacts', models.IntegerField(default=0)),
                ('total_campaigns', models.IntegerField(default=0)),
                ('total_emails_sent', models.IntegerField(default=0)),
                ('max_contacts', models.IntegerField(default=10000)),
                ('max_campaigns_per_month', models.IntegerField(default=100)),
                ('max_emails_per_month', models.IntegerField(default=50000)),
                ('is_trial', models.BooleanField(default=True)),
                ('trial_end_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='PlatformAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('total_users', models.IntegerField(default=0)),
                ('active_users', models.IntegerField(default=0)),
                ('new_users_today', models.IntegerField(default=0)),
                ('total_contacts', models.IntegerField(default=0)),
                ('total_campaigns', models.IntegerField(default=0)),
                ('total_templates', models.IntegerField(default=0)),
                ('emails_sent_today', models.IntegerField(default=0)),
                ('emails_delivered_today', models.IntegerField(default=0)),
                ('emails_opened_today', models.IntegerField(default=0)),
                ('emails_clicked_today', models.IntegerField(default=0)),
                ('average_delivery_rate', models.FloatField(default=0.0)),
                ('average_open_rate', models.FloatField(default=0.0)),
                ('average_click_rate', models.FloatField(default=0.0)),
                ('api_requests_today', models.IntegerField(default=0)),
                ('failed_requests_today', models.IntegerField(default=0)),
                ('average_response_time', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'platform_analytics',
                'ordering': ['-date'],
                'indexes': [models.Index(fields=['date'], name='platform_an_date_de1dc8_idx')],
            },
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('template_type', models.CharField(choices=[('NEWSLETTER', 'Newsletter'), ('PROMOTIONAL', 'Promotional'), ('TRANSACTIONAL', 'Transactional'), ('WELCOME', 'Welcome Series'), ('ANNOUNCEMENT', 'Announcement'), ('CUSTOM', 'Custom')], default='CUSTOM', max_length=20)),
                ('subject', models.CharField(max_length=255)),
                ('html_content', models.TextField()),
                ('text_content', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_shared', models.BooleanField(default=False)),
                ('usage_count', models.IntegerField(default=0)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Template',
                'verbose_name_plural': 'Email Templates',
                'db_table': 'email_templates',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailQueue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('SENDING', 'Sending'), ('SENT', 'Sent'), ('FAILED', 'Failed'), ('RETRYING', 'Retrying')], default='PENDING', max_length=20)),
                ('priority', models.IntegerField(default=0)),
                ('personalized_subject', models.CharField(max_length=255)),
                ('personalized_html_content', models.TextField()),
                ('personalized_text_content', models.TextField(blank=True, null=True)),
                ('attempts', models.IntegerField(default=0)),
                ('max_attempts', models.IntegerField(default=3)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('scheduled_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_queue', to='backend.emailcampaign')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='queued_emails', to='backend.contact')),
            ],
            options={
                'db_table': 'email_queue',
                'ordering': ['priority', 'scheduled_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('SENT', 'Email Sent'), ('DELIVERED', 'Email Delivered'), ('OPENED', 'Email Opened'), ('CLICKED', 'Link Clicked'), ('BOUNCED', 'Email Bounced'), ('UNSUBSCRIBED', 'Unsubscribed'), ('COMPLAINED', 'Spam Complaint'), ('FAILED', 'Send Failed')], max_length=20)),
                ('event_data', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('bounce_type', models.CharField(blank=True, choices=[('HARD', 'Hard Bounce'), ('SOFT', 'Soft Bounce'), ('BLOCK', 'Blocked')], max_length=10, null=True)),
                ('bounce_reason', models.TextField(blank=True, null=True)),
                ('clicked_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='backend.emailcampaign')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_events', to='backend.contact')),
            ],
            options={
                'verbose_name': 'Email Event',
                'verbose_name_plural': 'Email Events',
                'db_table': 'email_events',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailDomainConfig',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('domain_name', models.CharField(help_text='e.g., mycompany.com', max_length=100)),
                ('from_email', models.EmailField(help_text='e.g., marketing@mycompany.com', max_length=254)),
                ('from_name', models.CharField(help_text='e.g., MyCompany Marketing', max_length=100)),
                ('reply_to_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('smtp_provider', models.CharField(choices=[('GMAIL', 'Gmail (G Suite)'), ('OUTLOOK', 'Outlook 365'), ('SENDGRID', 'SendGrid'), ('MAILGUN', 'Mailgun'), ('AMAZON_SES', 'Amazon SES'), ('YAGMAIL', 'Yagmail (Gmail)'), ('CUSTOM', 'Custom SMTP'), ('PLATFORM', 'AfriMail Pro Platform')], default='PLATFORM', max_length=20)),
                ('smtp_host', models.CharField(blank=True, max_length=100, null=True)),
                ('smtp_port', models.IntegerField(default=587)),
                ('smtp_username', models.CharField(blank=True, max_length=100, null=True)),
                ('smtp_password', models.CharField(blank=True, max_length=500, null=True)),
                ('use_tls', models.BooleanField(default=True)),
                ('use_ssl', models.BooleanField(default=False)),
                ('domain_verified', models.BooleanField(default=False)),
                ('verification_status', models.CharField(choices=[('PENDING', 'Pending Verification'), ('VERIFIED', 'Verified'), ('FAILED', 'Verification Failed'), ('EXPIRED', 'Verification Expired')], default='PENDING', max_length=20)),
                ('verification_token', models.CharField(blank=True, max_length=100, null=True)),
                ('verification_attempts', models.IntegerField(default=0)),
                ('last_verification_attempt', models.DateTimeField(blank=True, null=True)),
                ('spf_record', models.TextField(blank=True, null=True)),
                ('dkim_record', models.TextField(blank=True, null=True)),
                ('dmarc_record', models.TextField(blank=True, null=True)),
                ('is_default', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('daily_send_limit', models.IntegerField(default=1000)),
                ('monthly_send_limit', models.IntegerField(default=10000)),
                ('emails_sent_today', models.IntegerField(default=0)),
                ('emails_sent_this_month', models.IntegerField(default=0)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_domains', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Domain Configuration',
                'verbose_name_plural': 'Email Domain Configurations',
                'db_table': 'email_domain_configs',
                'ordering': ['-is_default', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='emailcampaign',
            name='email_config',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='campaigns', to='backend.emaildomainconfig'),
        ),
        migrations.AddField(
            model_name='emailcampaign',
            name='template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='campaigns', to='backend.emailtemplate'),
        ),
        migrations.AddField(
            model_name='emailcampaign',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_campaigns', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ContactTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('color', models.CharField(default='#3B82F6', max_length=7)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_tags', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'contact_tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ContactImport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file_name', models.CharField(max_length=255)),
                ('file_path', models.CharField(max_length=500)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('total_rows', models.IntegerField(default=0)),
                ('successful_imports', models.IntegerField(default=0)),
                ('failed_imports', models.IntegerField(default=0)),
                ('duplicates_found', models.IntegerField(default=0)),
                ('errors', models.JSONField(blank=True, default=list)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('target_list', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='imports', to='backend.contactlist')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_imports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'contact_imports',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='ContactEngagement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('emails_received', models.IntegerField(default=0)),
                ('emails_opened', models.IntegerField(default=0)),
                ('emails_clicked', models.IntegerField(default=0)),
                ('engagement_score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engagement_history', to='backend.contact')),
            ],
            options={
                'db_table': 'contact_engagement',
                'ordering': ['-date'],
            },
        ),
        migrations.AddField(
            model_name='contact',
            name='lists',
            field=models.ManyToManyField(blank=True, related_name='contacts', to='backend.contactlist'),
        ),
        migrations.AddField(
            model_name='contact',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='contacts', to='backend.contacttag'),
        ),
        migrations.AddField(
            model_name='contact',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CampaignAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('emails_sent', models.IntegerField(default=0)),
                ('emails_delivered', models.IntegerField(default=0)),
                ('emails_bounced', models.IntegerField(default=0)),
                ('emails_failed', models.IntegerField(default=0)),
                ('unique_opens', models.IntegerField(default=0)),
                ('total_opens', models.IntegerField(default=0)),
                ('unique_clicks', models.IntegerField(default=0)),
                ('total_clicks', models.IntegerField(default=0)),
                ('unsubscribes', models.IntegerField(default=0)),
                ('complaints', models.IntegerField(default=0)),
                ('delivery_rate', models.FloatField(default=0.0)),
                ('open_rate', models.FloatField(default=0.0)),
                ('click_rate', models.FloatField(default=0.0)),
                ('unsubscribe_rate', models.FloatField(default=0.0)),
                ('bounce_rate', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_analytics', to='backend.emailcampaign')),
            ],
            options={
                'db_table': 'campaign_analytics',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='ApiUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.CharField(max_length=200)),
                ('method', models.CharField(max_length=10)),
                ('status_code', models.IntegerField()),
                ('response_time', models.FloatField()),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_usage', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_usage',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('LOGIN', 'User Login'), ('LOGOUT', 'User Logout'), ('PASSWORD_CHANGE', 'Password Changed'), ('EMAIL_VERIFIED', 'Email Verified'), ('PROFILE_UPDATED', 'Profile Updated'), ('CONTACT_CREATED', 'Contact Created'), ('CONTACT_IMPORTED', 'Contacts Imported'), ('CAMPAIGN_CREATED', 'Campaign Created'), ('CAMPAIGN_SENT', 'Campaign Sent'), ('EMAIL_CONFIG_ADDED', 'Email Configuration Added'), ('DOMAIN_VERIFIED', 'Domain Verified')], max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Activity',
                'verbose_name_plural': 'User Activities',
                'db_table': 'user_activities',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'activity_type'], name='user_activi_user_id_290628_idx'), models.Index(fields=['created_at'], name='user_activi_created_9fa3ca_idx'), models.Index(fields=['ip_address'], name='user_activi_ip_addr_ebdeb1_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='emailtemplate',
            index=models.Index(fields=['user', 'is_active'], name='email_templ_user_id_37bc62_idx'),
        ),
        migrations.AddIndex(
            model_name='emailtemplate',
            index=models.Index(fields=['template_type'], name='email_templ_templat_90f285_idx'),
        ),
        migrations.AddIndex(
            model_name='emailtemplate',
            index=models.Index(fields=['usage_count'], name='email_templ_usage_c_77a685_idx'),
        ),
        migrations.AddIndex(
            model_name='emailqueue',
            index=models.Index(fields=['status', 'scheduled_at'], name='email_queue_status_e1d260_idx'),
        ),
        migrations.AddIndex(
            model_name='emailqueue',
            index=models.Index(fields=['campaign', 'status'], name='email_queue_campaig_a0deb4_idx'),
        ),
        migrations.AddIndex(
            model_name='emailqueue',
            index=models.Index(fields=['priority'], name='email_queue_priorit_f8a3ff_idx'),
        ),
        migrations.AddIndex(
            model_name='emailevent',
            index=models.Index(fields=['campaign', 'event_type'], name='email_event_campaig_9b82e7_idx'),
        ),
        migrations.AddIndex(
            model_name='emailevent',
            index=models.Index(fields=['contact', 'event_type'], name='email_event_contact_3caea4_idx'),
        ),
        migrations.AddIndex(
            model_name='emailevent',
            index=models.Index(fields=['event_type', 'created_at'], name='email_event_event_t_bc2f0a_idx'),
        ),
        migrations.AddIndex(
            model_name='emailevent',
            index=models.Index(fields=['created_at'], name='email_event_created_a7f2d9_idx'),
        ),
        migrations.AddIndex(
            model_name='emaildomainconfig',
            index=models.Index(fields=['user', 'is_active'], name='email_domai_user_id_fbffc9_idx'),
        ),
        migrations.AddIndex(
            model_name='emaildomainconfig',
            index=models.Index(fields=['domain_verified'], name='email_domai_domain__3fee0a_idx'),
        ),
        migrations.AddIndex(
            model_name='emaildomainconfig',
            index=models.Index(fields=['smtp_provider'], name='email_domai_smtp_pr_faf48c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='emaildomainconfig',
            unique_together={('user', 'domain_name')},
        ),
        migrations.AddIndex(
            model_name='emailcampaign',
            index=models.Index(fields=['user', 'status'], name='email_campa_user_id_268749_idx'),
        ),
        migrations.AddIndex(
            model_name='emailcampaign',
            index=models.Index(fields=['scheduled_at'], name='email_campa_schedul_e7e336_idx'),
        ),
        migrations.AddIndex(
            model_name='emailcampaign',
            index=models.Index(fields=['created_at'], name='email_campa_created_42695f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contacttag',
            unique_together={('user', 'name')},
        ),
        migrations.AddIndex(
            model_name='contactlist',
            index=models.Index(fields=['user', 'is_active'], name='contact_lis_user_id_c0d1d4_idx'),
        ),
        migrations.AddIndex(
            model_name='contactlist',
            index=models.Index(fields=['list_type'], name='contact_lis_list_ty_866275_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contactlist',
            unique_together={('user', 'name')},
        ),
        migrations.AddIndex(
            model_name='contactengagement',
            index=models.Index(fields=['contact', 'date'], name='contact_eng_contact_75148c_idx'),
        ),
        migrations.AddIndex(
            model_name='contactengagement',
            index=models.Index(fields=['engagement_score'], name='contact_eng_engagem_a4ff70_idx'),
        ),
        migrations.AddIndex(
            model_name='contactengagement',
            index=models.Index(fields=['date'], name='contact_eng_date_7a60f0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contactengagement',
            unique_together={('contact', 'date')},
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['user', 'email'], name='contacts_user_id_bbbaf8_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['user', 'status'], name='contacts_user_id_11f858_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['user', 'is_active'], name='contacts_user_id_4b960f_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['engagement_score'], name='contacts_engagem_202f30_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['created_at'], name='contacts_created_4c6582_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contact',
            unique_together={('user', 'email')},
        ),
        migrations.AddIndex(
            model_name='campaignanalytics',
            index=models.Index(fields=['campaign', 'date'], name='campaign_an_campaig_6a6196_idx'),
        ),
        migrations.AddIndex(
            model_name='campaignanalytics',
            index=models.Index(fields=['date'], name='campaign_an_date_def475_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='campaignanalytics',
            unique_together={('campaign', 'date')},
        ),
        migrations.AddIndex(
            model_name='apiusage',
            index=models.Index(fields=['user', 'created_at'], name='api_usage_user_id_b7cc9a_idx'),
        ),
        migrations.AddIndex(
            model_name='apiusage',
            index=models.Index(fields=['endpoint', 'created_at'], name='api_usage_endpoin_6aa3d0_idx'),
        ),
        migrations.AddIndex(
            model_name='apiusage',
            index=models.Index(fields=['created_at'], name='api_usage_created_5b14f4_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['role'], name='users_role_0ace22_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['is_active'], name='users_is_acti_847b48_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['created_at'], name='users_created_6541e9_idx'),
        ),
    ]
